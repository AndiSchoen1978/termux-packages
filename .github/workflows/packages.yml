name: Packages

on:
  push:
    branches:
    - master
    - dev
    - 'dev/**'
    paths:
    - 'packages/**'
    - 'root-packages/**'
    - 'x11-packages/**'
  pull_request:
    paths:
    - 'packages/**'
    - 'root-packages/**'
    - 'x11-packages/**'
  workflow_dispatch:
    inputs:
      packages:
        description: "A space-separated names of packages selected for rebuilding"
        required: true

permissions: {} # none

jobs:
  build:
    permissions:
      contents: read # actions/upload-artifact doesn't need contents: write
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        target_arch: [aarch64, arm, i686, x86_64]
      fail-fast: false
    steps:
    - name: Clone repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set process id limit for 32-bit builds depending on aosp-libs
      run: echo 65535 | sudo tee /proc/sys/kernel/pid_max
    - name: Prepare environment
      run: |
        ./scripts/setup-ubuntu.sh
        ./scripts/setup-android-sdk.sh
        sudo apt install ninja-build
        ./scripts/free-space.sh
    - name: Golang validation
      run: ./scripts/bin/golang-validation "${{ matrix.target_arch }}"
    - name: Upload report artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: report-${{ matrix.target_arch }}
        path: /tmp/golang-validation-report.txt

  test-buildorder-random:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
    - name: Clone repository
      uses: actions/checkout@v4
    - name: Randomise buildorder.py test
      run: ./scripts/bin/test-buildorder-random
    - name: Randomise buildorder.py test (aarch64)
      env:
        TERMUX_ARCH: aarch64
      run: ./scripts/bin/test-buildorder-random
    - name: Randomise buildorder.py test (arm)
      env:
        TERMUX_ARCH: arm
      run: ./scripts/bin/test-buildorder-random
    - name: Randomise buildorder.py test (i686)
      env:
        TERMUX_ARCH: i686
      run: ./scripts/bin/test-buildorder-random
    - name: Randomise buildorder.py test (x86_64)
      env:
        TERMUX_ARCH: x86_64
      run: ./scripts/bin/test-buildorder-random

  upload-test:
    permissions:
      contents: read
    if: github.repository == 'termux/termux-packages' && github.ref != 'refs/heads/master'
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Clone repository
      uses: actions/checkout@v4
    - name: Get *.deb files
      uses: actions/download-artifact@v4
      with:
        path: ./
    - name: Check packages using Packages.bz2
      run: |
        if [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
          # GitHub sometimes add merge commits at the end
          # To prevent user confusion, filter them with --no-merges
          # Process tag '%ci:no-build' that may be added as line to commit message.
          # Forces CI to cancel current build with status 'passed'
          if grep -qiP '^\s*%ci:no-build\s*$' <(git log --format="%B" -n 1 --no-merges "HEAD"); then
            echo "[!] Force exiting as tag '%ci:no-build' was applied to HEAD commit message."
            exit 0
          fi
        fi

        for archive in debs-*/debs-{aarch64,arm,i686,x86_64}-${{ github.sha }}.tar; do
          tar xf "$archive"
        done

        error=0
        for repo in $(jq --raw-output 'del(.pkg_format) | keys | .[]' repo.json); do
          name=$(jq --raw-output '.["'${repo}'"].name' repo.json)
          distribution=$(jq --raw-output '.["'${repo}'"].distribution' repo.json)
          component=$(jq --raw-output '.["'${repo}'"].component' repo.json)
          url=$(jq --raw-output '.["'${repo}'"].url' repo.json)

          if [ ! -f debs/built_${name}_packages.txt ]; then
            continue
          fi
          if [ -z "$(cat debs/built_${name}_packages.txt)" ]; then
            continue
          fi

          for arch in aarch64 arm i686 x86_64; do
            if [ ! -f "Packages-${repo}-${arch}" ]; then
              echo "[*] Downloading ${url}/dists/${distribution}/${component}/binary-${arch}/Packages.bz2"
              curl -s \
                --user-agent 'Termux-Packages/1.0\ (https://github.com/termux/termux-packages)' \
                "${url}/dists/${distribution}/${component}/binary-${arch}/Packages.bz2" \
                -o "Packages-${repo}-${arch}.bz2"
              7z x "Packages-${repo}-${arch}.bz2" > /dev/null
            fi
            result=$(find debs -maxdepth 1 -type f | cut -d"/" -f2 | xargs -P$(nproc) -i{} grep "^Filename:.*/{}$" -nH "Packages-${repo}-${arch}" || true)
            if [ -n "$result" ]; then
              echo "$result" | grep -E "${arch}|all" || true
              error=1
            fi
          done
        done
        if [ "$error" != 0 ]; then
          echo "[!] Found local files same name with server files!"
          echo "[!] Please revbump package, rebase or tag commit with '%ci:no-build'"
          exit 1
        fi

  upload:
    concurrency: ${{ github.workflow }}
    permissions:
      contents: read
    if: github.repository == 'termux/termux-packages' && github.ref == 'refs/heads/master'
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Clone repository
      uses: actions/checkout@v4
    - name: Get *.deb files
      uses: actions/download-artifact@v4
      with:
        path: ./
    - name: Upload to packages.termux.dev
      env:
        REPOSITORY_URL: https://packages.termux.dev/aptly-api
        GITHUB_SHA: ${{ github.sha }}
        APTLY_API_AUTH: ${{ secrets.APTLY_API_AUTH }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        source scripts/aptly_api.sh

        for archive in debs-*/debs-{aarch64,arm,i686,x86_64}-${{ github.sha }}.tar; do
          tar xf "$archive"
        done

        for repo in $(jq --raw-output 'del(.pkg_format) | keys | .[]' repo.json); do
          export REPOSITORY_NAME=$(jq --raw-output '.["'$repo'"].name' repo.json)
          export REPOSITORY_DISTRIBUTION=$(jq --raw-output '.["'$repo'"].distribution' repo.json)

          # Upload file to temporary directory.
          uploaded_files=false
          shopt -s nullglob

          if [ -f debs/built_${REPOSITORY_NAME}_packages.txt ]; then
            for filename in $(cat debs/built_${REPOSITORY_NAME}_packages.txt | sed -E 's/(..*)/debs\/\1_\*.deb debs\/\1-static_\*.deb/g'); do
              if ! aptly_upload_file "$filename"; then
                exit 1
              fi

              uploaded_files=true
            done
            shopt -u nullglob

            # Publishing repository changes.
            if [ "$uploaded_files" = "true" ]; then
              if ! aptly_add_to_repo; then
                exit 1
              fi

              # Usually temporary directory is deleted automatically, but in certain cases it is left.
              aptly_delete_dir

              # Final part to make changes appear in web root.
              if ! aptly_publish_repo; then
                exit 1
              fi
            fi
          fi
        done
